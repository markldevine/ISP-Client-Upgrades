#!/usr/bin/env raku

#   dsmadmc -id=AAAAAA -pa=PPPPPP -dataonly=yes -tab -outfile ClientUpgrades.tab
#       "select NODE_NAME,trim(char(CLIENT_VERSION))||'.'||trim(char(CLIENT_RELEASE))||'.'||trim(char(CLIENT_LEVEL))||'.'||trim(char(CLIENT_SUBLEVEL)) from NODES where CLIENT_VERSION=8 and CLIENT_LEVEL!=22 order by NODE_NAME"

use ISP::Servers;
use ISP::dsmadmc;

use Data::Dump::Tree;

my %nodes;

my grammar VRLS {
    token TOP       { ^ <version> '.' <release> '.' <level> '.' <sublevel> $ }
    token version   { \d+ }
    token release   { \d+ }
    token level     { \d+ }
    token sublevel  { \d+ }
}

my class VRLS-actions {
  method TOP ($/) {
        my Int $rmt-number          = +$/<rmt-device><rmt-number>;
}

sub normalize (Int:D $v, Int:D $r, Int:D $l, Int:D $s) {
    return ($v * 1000) + ($r * 100) + ($l * 10) + s;
}

sub MAIN (
#   Str:D   :$isp-admin!,                           #= ISP admin name
    Str:D   :$isp-admin     = 'ISPMON',             #= ISP admin name
    Str:D   :$minimum       = '8.1.23.0',           #= Minimum ISP client level
) {
    die 'Malformed --minimum <' ~ $minimum ~ '>' unless my $minimum-match = VRLS.parse($minimum);
    my ISP::dsmadmc $dsmadmc;
    my @cmd                 = [
                                'select', 
                                'NODE_NAME'         ~ ',',
                                'CLIENT_VERSION'    ~ ',',
                                'CLIENT_RELEASE'    ~ ',',
                                'CLIENT_LEVEL'      ~ ',',
                                'CLIENT_SUBLEVEL'   ~ ',',
                                'CONTACT'           ~ ',',
                                'EMAIL_ADDRESS',
                                'from',
                                'NODES',
#                               'where',
#                               'CLIENT_VERSION=8',
#                               'and',
#                               'CLIENT_LEVEL!=23',
                              ];
    my @isp-servers         = ISP::Servers.new(:$isp-admin).isp-servers.keys;
    for @isp-servers.sort -> $isp-server {
next unless $isp-server eq 'ISPLC01';
die $minimum-match<version>.Str;
        $dsmadmc           .= new(:$isp-server, :$isp-admin);
        for $dsmadmc.execute(@cmd).list -> $record {
            my $node        = $record<NODE_NAME>;
#   CLIENT_LEVEL => 21.Str
#   CLIENT_RELEASE => 1.Str
#   CLIENT_SUBLEVEL => 0.Str
#   CLIENT_VERSION => 8.Str
#   CONTACT => Narayanan, Rajesh V.;FareCollection.Str
#   EMAIL_ADDRESS => .Str
            %nodes{$node}<LEVEL>    = $record<CLIENT_LEVEL>;
            %nodes{$node}<RELEASE>  = $record<CLIENT_RELEASE>;
            %nodes{$node}<SUBLEVEL> = $record<CLIENT_SUBLEVEL>;
            %nodes{$node}<VERSION>  = $record<CLIENT_VERSION>;
            %nodes{$node}<CONTACT>  = $record<CONTACT>;
            %nodes{$node}<EMAIL>    = $record<EMAIL_ADDRESS>;
        }
#ddt %nodes;

#       %nodes{$isp-server} = $result[0]<TOTALSUROCC_TB>.Real;
#       printf "%-20s%6.2f\n", $isp-server, %SUR{$isp-server} if $detail;
    }
}

=finish
